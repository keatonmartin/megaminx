package main

import "math"

type Node struct {
	s State
	g int
}

// G returns the cost of a node so far
func G(n Node) int {
	return n.g
}

// H returns the heuristic value for a node
func H(n Node) int {
	wrong := 0 // count of stickers on the wrong face
	for i := 0; i < 12; i++ {
		for j := 0; j < 10; j++ {
			if n.s[i][j] != i {
				wrong++
			}
		}
	}
	return int(math.Ceil(float64(wrong) / 15.0)) // ceil(wrong / 15)
}

// Child returns all children of Node n
// Note: only children generated by rotating the puzzle counter-clockwise are considered
//func Child(n Node) []Node {
//	// We can generate nodes by rotating any of the 12 faces
//	for i := 0; i < 12; i++ {
//
//	}
//}

// G returns the cost so far for a node
func (n Node) G() int {
	return n.g
}
